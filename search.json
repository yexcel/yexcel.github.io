[{"title":"Java大纲","url":"/posts/2302726656.html","content":"**Java存活路线**\n\n<!-- more -->\n# 一阶段：Java 进阶必备技术栈\n## 01 项目性能优化\n- 性能问题分析理论：3S 定理\n\n- 性能指标：RT、TPS、并发数...\n\n- 压测监控平台：Docker、InfluxDB、Grafana、Prometheus 和 node_exporter 环境搭建\n\n- 梯度压测：分析接口性能瓶颈\n\n- 分布式压测：构建百万次请求的压力\n\n- 服务容器优化：Tomcat、I/O 模型、Undertow 调优\n\n- 数据库调优：影响数据库性能因素\n\n- OpenResty 调优\n\n- 多级缓存调优\n\n- JVM 调优\n\n## 02 JVM虚拟机\n- JVM 基本常识与整体架构\n\n- 类加载子系统：加载时机、加载过程\n\n- 类加载器详解\n\n- JVM 加载机制剖析：一个类的一生\n\n- 双亲委派与打破双亲委派\n\n- 自定义类加载器\n\n- JVM 运行时数据区：堆、虚拟机栈、本地方法栈、方法区、字符串常量池、程序计数器\n\n- JVM 内存模型变迁\n\n- 栈帧剖析与栈异常案例\n\n- 字符串常量池如何存储和查找数据\n\n- 方法区存储什么，永久代与元空间是什么关系\n\n- 一个对象的一辈子：对象创建流程与内存分配\n\n- 对象怎样才会进入老年代？内存担保机制\n\n- 解剖对象这只小麻雀：对象内存布局，对象头 Header 的 MarkWord 和 KlassPoint\n\n- 如何定位一个对象\n\n- GC 基本原理：什么是垃圾、如何找到垃圾、如何清除垃圾、用什么清除垃圾\n\n- 垃圾收集器剖析：Parallel、Serial、CMS、G1、ZGC\n\n- Minor GC 、Major GC 和 Full GC\n\n- JVM 核心参数：标准参数、非标准参数、不稳定参数\n\n- JVM 常用指令：jps、jstat、jinfo、jhat、jmap\n\n- JVM 调优工具：VisualVM、GC Easy、PerfMa、MAT\n\n- GC 日志分析\n\n- GC 日志分析工具\n\n- 内存溢出与泄露案例\n\n- 检测死锁案例\n\n- JVM 调优实战案例：\n\n- 堆内存和元空间优化\n\n- 堆栈优化\n\n- 吞吐量优先策略\n\n- 响应时间优先策略\n\n- G1 全功能垃圾收集策略\n- JVM调优实战案例\n\t- - 堆内存和元空间优化\n\t- 堆栈优化\n\t- 吞吐量优先策略\n\t- 响应时间优先策略\n\t- G1 全功能垃圾收集策略\n## 03 多线程与并发编程\n- 线程和进程、并发与并行、上下文切换\n\n- 多线程并发中的线程安全问题\n\n- 多线程并发的三个特性：原子性、可见性、顺序性分析\n\n- 指令重排序、happens-before 规则\n\n- JMM 模型深度剖析：JSR-133: Java Memory Model and Thread Specification\n\n- Synchronized 原理分析\n\n- 锁优化&锁升级\n\n- Volatile 原理与源码分析\n\n- 多线程在 JVM 中的实现原理剖析\n\n- CAS 算法和 ABA 问题\n\n- 显示锁和 AQS 底层原理分析\n\n- AQS 共享锁实现原理\n\n- ReentrantLock 重入锁源码分析\n\n- ReentrantReadWriteLock 读写锁\n\n- 并发容器深度剖析\n\n- CAS 原子操作及相关类\n\t- 基本数据类型：AtomicInteger、AtomicLong、AtomicBoolean\n\n\t- 数组：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray\n\n\t- 引用类型：AtomicReference\n- 并发编程工具掌握：CountDownLatch、Semaphore、CyclicBarrier\n\n- Future 和 FutureTask\n\n- 线程池工作原理\n\n- ThreadLocal 底层原理\n## 04 网络编程\n- 网络通信协议：TCP/IP 协议集\n\n- TCP/IP 五层模型和 OSI 模型详解\n\n- TCP 三次握手和四次挥手机制\n\n- TCP 与 UDP 协议\n\n- 从输入 URL 地址到显示网页经历了哪些过程\n\n- HTTP/1.0 与 HTTP/1.1 的区别\n\n- URI 与 URL 的区别\n\n- HTTP 与 HTTPS 的区别\n\n- 同步和异步、阻塞和非阻塞\n\n- 五种 I/O 模型：阻塞 I/O 模型、非阻塞 I/O 模型、多路复用 I/O 模型、信号驱动 I/O 模型、异步 I/O 模型\n\n- JAVA 网络编程模型：BIO、NIO、AIO\n\n- NIO 多路复用深入剖析：Selector、Channel 与 SelectionKey\n\n- NIO 案例 01：客户端与服务器之间通信\n\n- NIO 案例 02：网络聊天室 V1.0\n\n- Netty 总体架构设计\n\n- Netty 线程模型：单线程、多线程与 Netty 线程模型\n\n- Netty 核心组件：Bootstrap、EventLoopGroup、Channel 与 ChannelHandlerContext 等\n\n- Netty 案例 03：客户端与服务器之间通信\n\n- Netty 案例 04：网络聊天室 V2.0\n\n- Netty 编解码器\n\n- RPC 通信原理\n\n- RPC 的设计架构与思想\n\n- RPC 架构完整调用流程\n\n- 案例 05：手写一个 RPC 框架 HeroRPC\n\n- 案例 06：手写一个 Tomcat\n\n- 案例 07：600W+ 连接网络应用实战\n# 二阶段：海量数据存储专题\n## 01MySQL进阶\n- MySQL 应用架构：内存结构、磁盘结构\n\n- MySQL 体系架构\n\n- MySQL 运行机制\n\n- 一条 SQL 语句的完整执行流程\n\n- Buffer Pool\n\n- 日志缓冲\n\n- 内存数据落盘\n\n- CheckPoint\n\n- Double Write\n\n- 存储引擎原理：InnoDB、MyISAM\n\n- 索引的数据结构：B+ 树、为什么不用红黑树、二叉树、B 树？\n\n- 索引原理\n\n- 索引分析与优化建议\n\n- 索引下推 ICP\n\n- 聚簇索引，辅助索引\n\n- 查询分析与优化\n\n- 事务 ACID 特性\n\n- 事务控制的演进\n\n- 事务隔离级别\n\n- LBCC 与 MVCC\n\n- ReadView：快照读、当前读\n\n- 版本链\n\n- 日志：Undo log、redo log、binlog\n\n- 锁：全局锁、表锁、行锁【记录锁、间隙锁、临键锁、插入意向锁】、读锁、写锁\n\n- 复杂 SQL 加锁分析\n\n- 死锁原理\n## 02 海量数据存储与优化\n- 数据库压力测试\n\n- 数据库的连接池优化\n\n- SQL 语句优化：执行计划\n\n- 索引优化\n\n- Limit 优化\n\n- 子查询优化\n\n- SQL 语句性能分析\n\n- 慢查询日志\n\n- 线程使用情况分析\n\n- 集群架构设计\n\n- 主从模式高可用\n\n- 双主模式\n\n- 分库分表\n\n- 分库分表实战\n\n- ShardingSphere\n\n- Sharding-JDBC\n\n- 数据分片剖析实战\n\n- 读写分离剖析实战\n\n- 分布式事务剖析实战\n\n- Sharding-Proxy 实战\n\n- Sharding Sphere 源码分析\n\n- MyCat 核心概念\n\n- MyCat 架构剖析\n\n- MyCat 配置详解\n\n- MyCat 管理命令详解\n\n- MyCat 分片规则详解\n\n- MyCat 分库分表\n\n- MyCat 读写分离\n\n- MyCat 强制路由\n\n- MyCat 注解技术\n\n- MyCat 核心技术分析\n\n- MyCat 分布式事务的实现\n\n- MyCat SQL 路由的实现\n\n- MyCat 跨库 JSON 的实现\n\n- MyCat 数据汇聚和排序的实现\n## 03 MongoDB\n- MongoDB 体系结构\n\n- MongoDB 存储原理\n\n- MongoDB 存储引擎\n\n- MongoDB 索引和 explain 分析\n\n- MongoDB 索引底层原理分析\n\n- MongoDB 主备切换\n\n- MongoDB 企业实战\n\n- MongoDB 集群高可用\n\n- 复制集 replica sets\n\n- 分片集群 Shard Cluster\n\n- MongoDB 安全认证\n\n- 监控服务（Mong oOps Manager）\n\n- MongoDB 备份\n## 04 FastDFS\n- 分布式文件系统\n\n- FastDFS 特性\n\n- FastDFS 的构成\n\n- Linux 下 FastDFS 的安装\n\n- Java 访问 FastDFS\n\n- FastDFS 系统架构\n\n- FastDFS 功能原理\n\n- FastDFS 集群和配置优化\n\n- FastDFS 企业实战\n\n- Spring Boot 访问 FastDFS\n# 三阶段：常用开发框架解读专题\n--- \n## 01 **Spring 源码**\n- Spring 源码阅读前沿\n\n- Spring 创建对象代码演变及 IoC 容器初始化\n\n- 手写一个 Spring 框架案例\n\n- Spring 面向对象 OOAD 和七大设计原则\n\n- Spring-IoC 模块的面向对象设计\n\n- Spring 面向对象方式手写 IoC 流程\n\n- Spring-IoC 源码阅读\n\n- Spring-AOP 核心概念以及动态代理原理\n\n- Spring-AOP 三大核心流程图解\n\n- Spring-AOP 源码阅读\n\n- Spring 中的设计模式：责任链模式与反射调用\n## 02 **Spring MVC 源码**\n- 手写一个 Spring MVC Web 应用框架\n\n- Spring MVC 应用框架架构解析\n\n- 手写一个 Spring 框架案例\n\n- 图解 Spring MVC 执行流程\n\n- Spring MVC 源码阅读\n\n- 解析 RequestMappingAdapter 流程\n## 03 **Spring Boot 应用**\n- Spring Boot 与 Spring 的区别与联系\n\n- Spring Boot 启动流程源码解析\n\n- yml 配置文件加载流程解析\n\n- 图解 Spring Boot 自动配置流程\n\n- Spring Boot&Redis&MyBatis 整合源码解析\n\n- 使用自定义 starter 完成案例\n## 04 **MyBatis 源码**\n- 采用面向的对象方式手写一个 MyBatis 框架\n\n- 解析 MyBatis 版本配置文件及对应存储类分析\n\n- MyBatis-SqlSession 执行流程解析\n\n- MyBatis-Mapper 代理底层原理解析\n## 05 **Tomcat 源码**\n- Tomcat 底层原理解析\n\n- 搭建 Tomcat 源码环境\n\n- 手写 Tomcat 源码\n\n- 阅读解析 Tomcat 启动流程\n\n- Tomcat 加载、创建 Servlet 流程源码解读\n\n- 解析 Tomcat 请求处理流程\n## 06 **Nginx 应用**\n- Nginx 使用原理解析\n\n- Web Server 技术选型\n\n- 详解 Nginx 配置文件\n\n- Nginx 请求定位之 server 定位\n\n- Nginx 请求定位之 location 定位\n\n- Nginx 应用之 rewrite 重定向\n\n- Nginx 应用实战之静态资源服务器\n\n- Nginx 应用实战之反向代理应用\n\n- Nginx 应用实战之负载均衡\n\n- Nginx 应用实战之动静分离\n\n- Nginx 应用实战之虚拟主机应用\n\n- Nginx 应用实战之缓存配置\n\n- Nginx 应用实战之日志管理\n# 四阶段：分布式缓存&搜索专题\n## 01 Redis\n- Redis 底层数据结构的空间使用情况、时间复杂度\n\n- 数据结构原理与场景实战\n\n- Redis 网络模型：阻塞&非阻塞\n\n- 用户态&内核态\n\n- I/O 多路复用\n\n- Redis 单线程\n\n- Redis RESP 通信协议\n\n- Redis 的内存淘汰、内存布局、key 过期机制\n\n- Redis 最佳实践：key 设计原则，bigkey、hotkey 的发现方式和避免手段\n\n- Redis 批处理的场景和不足，分析 Redis 数据安全问题。\n\n- Redis 服务端优化之持久化原理和常见配置\n\n- Redis 服务端优化之命令安全、内存安全配置\n\n- Redis 运维之主从同步、哨兵、集群分片实现原理\n\n- Redis 场景实战\n## 02 Elasticsearch\n- Elasticsearch 倒排索引\n\n- FOR 算法、RoaringBitMap 算法原理\n\n- 前缀树、FST 原理解析\n\n- Elasticsearch 之集群分片\n\n- Elasticsearch 全文搜索 match、精准查询 term\n\n- Elasticsearch 过滤器\n\n- Elasticsearch 组合查询、模糊查询\n\n- scriptings 脚本\n\n- Elasticsearch 分词过滤\n\n- Elasticsearch 文档\n\n- 外部词库更新\n\n- 分词器 tokenizer\n\n- Elasticsearch 聚合查询\n\n- Elasticsearch 场景实战\n# 五阶段：消息队列专题\n## 01 消息中间件介绍\n- 消息中间件使用场景\n\n- 消息中间件需要解决的问题\n\n- 消息中间件选型\n\n- 领域模型介绍\n\n- RocketMQ 环境搭建、Debug 调试\n## 02 RocketMQ 实战\n- 消息发送 API 详解与版本变迁说明\n\n- 消息发送核心参数与工作原理\n\n- 消息发送常见错误与解决方案\n\n- 事务消息以及定时消息发送实战\n\n- 消息消费 API 详解与版本变迁说明\n\n- DefaultMQPushConsumer 核心参数与工作原理\n\n- DefaultMQPushConsumer 使用示例与注意事项\n\n- 结合应用场景学习 DefaultMQPushConsumer\n\n- 消息过滤实战\n\n- 消息消费积压问题排查实战\n\n- 订阅关系不一致实战\n\n- 批量消费实战\n## 03 RocketMQ 原理应用\n- Broker 启动流程分析\n\n- NameServer 路由注册机制\n\n- 生产者的发送消息流程\n\n- 消费者的接收消息流程\n\n- 消息的可靠性应该如何保证\n\n- 不同消息的有序性如何解决\n\n- Broker 接收消息的处理流程\n## 04 RocketMQ 高级特性\n- 消息在 Broker 端的文件布局\n\n- 消息存储的高效与刷盘策略\n\n- Broker 快速读取消息机制\n\n- 文件恢复与 CheckPoint 机制\n\n- 消息大量堆积了该怎么办\n\n- 部署架构与高可用机制\n\n- NameServer 的设计理念\n## 05 Kafka 实战\n- Kafka 基础架构运行流程\n\n- 生产者选择分区发送数据流程\n\n- 生产者发送数据的可靠性保证\n\n- 服务端的消息处理架构模型\n\n- 服务端消息存储的文件布局\n\n- 如何保证服务端数据的一致性\n\n- 消费方如何消费数据/消费分区\n\n- Kafka 该如何实现顺序消费\n\n- 消费者组重平衡流程解析\n\n- Kafka 有哪些高性能的设计\n\n- Kafka 与 RocketMQ 的主流功能对比\n# 六阶段：微服务前沿技术栈专题\n## 01 体系介绍\n- Nacos Registry\n- Nacos Config\n- OpenFeign\n- Gateway \n- Dubbo\n- Sentinel\n- Seata\n## 02 Spring Cloud 最佳实践\n\n- Provider + Consumer + Eureka 服务搭建\n    \n- Provider + Consumer + Nacos 服务搭建\n    \n- Consumer + Provider + Nginx 集群搭建\n## 03 Nacos 注册与发现\n\n- Nacos 服务注册案例搭建\n    \n- Nacos 服务订阅案例搭建\n    \n- Nacos Client 发起注册流程\n    \n- Nacos Server 处理注册流程\n    \n- Nacos Client 发起订阅流程\n    \n- Nacos 心跳与剔除机制\n## 04 Nacos 配置中心\n\n- Nacos Config 动态更新端口案例搭建\n    \n- Nacos Config 动态更新配置案例搭建\n    \n- Nacos 配置中心源码分析\n    \n- Nacos 动态更新机制\n    \n- Nacos UDP 通知更新机制\n    \n- Nacos 集群同步源码分析之 CP + AP 模式\n    \n- Nacos 集群同步 Distro 一致性协议\n    \n- Nacos 集群同步 Raft 一致性协议\n## 05 OpenFeign 负载均衡\n\n- Ribbon 工程案例搭建\n    \n- OpenFeign 负载均衡与降级案例搭建\n    \n- OpenFeign 源码分析之 @FeignClient 注解扫描机制\n    \n- OpenFeign 源码分析之 Feign 的上下文隔离机制\n## 06 Gateway 网关路由\n\n- Gateway 路由案例搭建\n    \n- 自定义拦截过滤\n    \n- 转发重定向机制\n## 07 Sentinel 限流降级\n\n- Sentinel 手动设置限流/降级案例搭建\n    \n- Sentinel 接入 Nacos 案例搭建\n    \n- 探索 Sentinel 规则持久化机制\n    \n- 联动 Sentinel 与 Nacos 的持久化实现\n    \n- 核心 SphU.entry 源码分析\n    \n- ProcessorSlotChain 过滤器链流程\n    \n- StatisticSlot 核心处理逻辑分水岭\n## 08 Dubbo 服务调用框架\n\n- Dubbo 工程案例环境搭建\n    \n- Provider & Consumer 案例搭建\n    \n- 依赖检查 & 负载均衡案例搭建\n    \n- 广播调用 & 缓存操作案例搭建\n    \n- 点对点调用案例搭建\n    \n- 泛化调用案例搭建\n    \n- Dubbo 源码分析\n    \n- JDK SPI 与 Dubbo SPI 机制\n    \n- Dubbo 服务发布流程\n    \n- Dubbo 服务订阅流程\n    \n- Dubbo Wrapper 机制\n    \n- Dubbo 协议编解码\n# 七阶段：持续集成与容器化专题\n## 01 CI/CD、DevOps\n\n- 软件生命周期概念\n    \n- CI/CD 概念\n    \n- DevOps 概念\n    \n- 搭建实验环境\n    \n- 初识 Jenkins\n    \n- Jekins 集成 Maven 构建 Java 应用程序\n    \n- Jekins 集成 Git 搭建 GitLab 服务器\n    \n- Jenkins 集成 GitLab 管理 Java 应用程序\n    \n- Jenkins Security 用户角色管理\n    \n- Jenkins 自动化任务\n    \n- Jenkins 流水线 Pipeline\n    \n- Jenkins 实战之集成 Ansible\n    \n- Jenkins 实战之搭建 CI/CD 流水线\n## 02 Docker\n\n- Jenkins 基础&安装流程\n    \n- 虚拟化技术 vs 容器化原理\n    \n- Docker client 命令详解\n    \n- Docker 交互指令\n    \n- Docker 镜像概念\n    \n- Docker 实战部署 Web 服务\n    \n- Docker-compose 部署多容器应用\n    \n- Docker 进阶：container 概念详解\n    \n- Docker 进阶：network 概念详解\n    \n- Docker 进阶：image 概念详解\n    \n- Docker 进阶：volume 概念详解\n    \n- Docker Swarm：微服务项目容器化部署\n    \n- Docker compose vs Docker Swarm\n    \n- Docker 私服搭建\n\n## 03 Kubernetes\n\n- K8s 集群搭建\n    \n- Harbor 仓库搭建\n    \n- K8s 基本指令入门\n    \n- K8s 核心组件原理\n    \n- K8s 网络原理\n    \n- K8s 负载均衡\n    \n- POD 调度详解、重启策略\n    \n- 容器探针\n    \n- POD 核心原理剖析\n    \n- Ingress 七层负载君合实战方案\n    \n- ReplicaSet 剖析\n    \n- configmap 资源对象剖析\n    \n- K8s 存储解析\n    \n- PVC 和 PV 深度剖析\n    \n- headless Service 原理解析\n    \n- statefulSet 原理解析\n    \n- 有状态服务部署","tags":["Java","技术路线"],"categories":["Java","学习路线"]},{"title":"尝试篇","url":"/posts/3125928431.html","content":"{% note info %}\n记录自己做过的尝试，无论事情大小，重在尝试\n{% endnote %}\n\n<!-- more -->\n\n# 扇贝一天背单词达到800\n\n---\n\n![](1b44d28ac7591d016fc8601febfaada.jpg)\n","tags":["尝试","体验"],"categories":["人生体验"]},{"title":"10月 - 每日反省","url":"/posts/2662318435.html","content":"- 记录10月每日收获\n\n<!-- more -->\n# 26日\n---\n学习了行列式的性质，五个字**转换加乘拆**，即转置、变换、倍加、数乘和拆分\n- 转置：行变成列，①行变成①列，n行变成n列...；并且转置之后等于原行列式\n- 变换：行列式的两行或者两列相互交换位置，整个行列式要变号；变换一次要变一次号\n- 倍加：某一行（列）的k倍之后加到另外一行（列）上，行列式值不变\n- 数乘：某一行或者某一列乘以一个数字相当于**整个行列式**乘以这个数\n- 拆分：针对行列式中加减的情况，一行（列）进行拆分，但是其余行（列）不变；**一行（列）拆开，其余行（列）不变**\n>其中：\n>1：如果两行或者两列相同，则行列式值为0\n>2：数乘可以用来提炼某一行（列）的公因子实现化简行列式\n>3：一行（列）对应位置元素是另外一行（列）的倍数，则行列式值=0\n>4：倍加用来**造0**化简\n\n# 27日\n---\n  今天学习了行列式的按行展开和按列展开、余子式和代数余子式。主要利用一行或者一列中含0量高的那行（列），无论是二阶还是三阶都可以用行列式的展开来快速求解，相比于之前的使用行列式的性质（转换加倍分）来的快，但是这一块因为老师上课不好演示，学起来比较困难。\n\n  上午做行列式性质的时候，遇到一种有特点的题，就是无论哪一行，那一行所有元素加起来的和都是相同的，此题型的解题方法为：将第一列后面的几列全部加到第一列，然后第一列所有的元素都是相同的和，然后将这个和提到行列式的外面，然后第一列全都是1，此时再用行列式性质进行**造0**求解。\n\n\n# 28日\n---\n  上午开论文会，下午写论文写到回宿舍，回宿舍之后又帮其他宿舍的两个同学的代码搞了一下，搞到凌晨才回去。所以，收获几乎为0。\n\n# 29日\n---\n  今天白天一直都在做数学，晚上来把论文赶出来。\n  数学学了行列式的按行展开按列展开的逆用，自己补充了异乘变零定理：一行（列）和另一行（列）的代数余子式相乘的和为0。此外还学了矩阵：概念，加减乘，一些特殊矩阵（单位矩阵、上三角矩阵、下三角...);\n  计算四阶行列式步骤多，而且对不同的行或列进行造0很容易导致结果不同，这个地方需要自己大量练习计算。\n  还有两天，数学继续干。\n\n# 30日 \n---\n  今天上午在完善论文，一直在画E-R图，下午写论文，晚上改论文，单词背了四五百，其他无。属于是白忙活的一天。\n\n  \n","tags":["反思"],"categories":["反省","10月"]},{"title":"Plans for 2024","url":"/posts/2479467106.html","content":"2024年升级清单\n\n<!-- more -->\n\n**10月**\n\n1. 数学基础班学完\n2. 英语单词6000词重新过2轮\n\n---\n\n**11月**\n\n1. 数学所有课程做一遍\n2. 英语套卷做30套，作文每种模板背十篇，听力把全国所有的听力过一轮\n3. 专业课的PDF全部看完并熟知，时间充裕就做文字输出\n4. 月末总结出自身的学习体系（流程 + 方法 + 细节）\n\n---\n\n**12月**\n\n- 待定\n","tags":["Planning","年度期待"],"categories":["年度"]},{"title":"排版工具 - Typst","url":"/posts/3498028646.html","content":"\n**放置一些我个人喜欢用的一些工具**\n\n<!-- more -->\n# Typst 平替Latex的新一代工具\n---\n- [中文社区导航](https://typst-doc-cn.github.io/guide/quick-start.html)\n- [官网使用Typst](https://typst.app/)\n- [中文教程](https://typst-doc-cn.github.io/docs/tutorial/writing-in-typst/)\n- [官网教程-英文](https://typst.app/docs/)\n- [https://typst.app/universe/](https://typst.app/universe/)\n\n>使用方式除了官网编辑器之外，还可以用Vscode安装插件**Tinymistt Typst**进行写作\n>此外Chrome浏览器在浏览Typst官网的时候在地址栏提供下载，可以安装到本地使用。\n>Typst听说是两个德国人被Latex折磨的不行之后自己发明出来的，是优秀的排版工具\n>我是为了写简历才学习使用的，此外还可以用来写论文一类的规范文件。","tags":["tools"],"categories":["工具"]},{"title":"MySQL","url":"/posts/3259397556.html","content":"![](file-20241023133230490.png)\n\n**MySQL相关知识总结**\n\n<!-- more -->\n# 如何处理 mysql 的死锁问题\n[# 如何处理 mysql 的死锁问题](https://xie.infoq.cn/article/71b956f9467eddb8c352bada1)\n","tags":["MySQL","数据库"],"categories":["数据库","MySQL"]},{"title":"基础理论知识补充","url":"/posts/2782156371.html","content":"![](file-20241023081927058.png)\n\n**补充在计算机基础学习过程中遇到的疑惑点**\n\n<!-- more -->\n# 数据总线双向三态\n**数据总线双向三态是一种在计算机硬件中用于数据传输的机制，它允许数据在总线上进行双向传输，并且可以处于高阻态**。以下是对数据总线双向三态的具体说明：\n\n1. **双向性**：数据总线的双向性意味着它可以支持数据的双向流动。具体来说，数据既可以通过总线从CPU传送到其他设备（如存储器或I/O接口），也可以从这些设备传送回CPU。这种双向性使得数据总线非常灵活，能够适应多种不同的数据传输需求[^1^]。\n\n2. **三态特性**：三态是指总线可以处于三种不同的状态：高电平（逻辑“1”）、低电平（逻辑“0”）和高阻态（通常用符号Z表示）。高阻态是一种特殊状态，在这种状态下，总线既不输出高电平也不输出低电平，相当于与外部电路断开，不会影响到其他设备的正常工作[^3^][^4^]。\n\n3. **使能控制**：三态门通过一个使能信号（EN）来控制其输出状态。当使能信号为高电平时，三态门正常工作，输出高电平或低电平；当使能信号为低电平时，三态门输出高阻态。这种设计使得多个设备可以共享同一条总线而不会发生冲突[^4^]。\n\n4. **应用场景**：数据总线双向三态广泛应用于各种计算机系统中，特别是在需要频繁进行数据交换的场景中，如内存访问、I/O操作等。此外，在FPGA（现场可编程门阵列）设计中，双向IO口也常使用三态门来实现数据的双向传输[^2^][^5^]。\n\n综上所述，数据总线双向三态是一种高效且灵活的数据传输机制，通过使能信号的控制，实现了数据的双向流动和高阻态输出，从而满足了复杂系统对数据传输的需求。\n\n---\n\n# 通用寄存器\n通用寄存器是**处理器中用于存储数据和参与算术逻辑运算的重要组件**。以下是对通用寄存器的详细介绍：\n\n1. **基本概念**：通用寄存器是CPU内部用于暂时存放数据、指令和地址的存储单元。它们的主要功能包括存储临时数据、计算过程中的中间结果，以及作为指针来访问内存地址[^1^]。\n\n2. **主要作用**：通用寄存器在计算机系统中扮演着核心角色。它们不仅用于存储数据和指令，还参与到几乎所有的算术和逻辑运算中。例如，加法、减法、乘法和除法等操作都可能需要通用寄存器的参与[^2^]。\n\n3. **特殊功能**：除了基本的存储和运算功能外，某些通用寄存器还具有特殊的用途。例如，在8086处理器中，AX寄存器通常被用作累加器，用于执行乘法和除法运算；BX寄存器则常被用作基址寄存器，用于存储内存地址；CX寄存器作为计数器，用于循环和位移操作；DX寄存器则用于I/O操作和乘除运算中的数据暂存[^4^]。\n\n4. **分类**：根据不同的处理器架构和设计，通用寄存器可以分为整数寄存器和浮点寄存器两大类。整数寄存器主要用于存储整数数据，而浮点寄存器则用于存储浮点数数据。此外，一些处理器还将通用寄存器设计为具有多个子寄存器或寄存器组的形式，以便更好地支持不同的数据类型和操作[^2^]。\n\n5. **应用**：在程序设计中，特别是汇编语言编程中，程序员需要熟悉每个通用寄存器的一般用途和特殊用途，以便在程序中做到正确、合理地使用它们。通过合理利用通用寄存器，可以提高程序的执行效率和性能[^1^][^2^]。\n\n综上所述，通用寄存器在计算机系统中具有举足轻重的地位。它们不仅是数据存储和传输的关键工具，还是算术逻辑运算的核心参与者。\n\n---\n# 定点运算器\n**定点运算器是一种专门用于执行定点数运算的硬件设备，广泛应用于计算机系统中进行数值计算和数据处理**。以下是对定点运算器的详细介绍：\n\n1. **概念与应用**\n   - **概念定义**：定点运算器是计算机中的一种重要组成部分，主要用于处理定点数运算。它通过固定小数点位置的方式，对整数和小数部分进行处理[^1^]。\n   - **应用领域**：定点运算器广泛应用于图像处理、音频处理、信号处理、通信系统以及嵌入式系统等领域。随着人工智能和深度学习技术的发展，定点运算器在神经网络模型的部署和推理过程中也发挥着重要作用[^1^]。\n2. **基本组成**\n   - **寄存器**：寄存器用于存储操作数和运算结果，包括累加器和数据寄存器等[^1^][^5^]。\n   - **运算单元**：运算单元负责执行各种算术运算，如加法、减法、乘法和除法等[^1^][^3^]。\n   - **控制逻辑**：控制逻辑协调整个运算器的工作流程，控制操作数的输入输出和运算步骤的调度[^1^]。\n3. **工作原理**\n   - **操作数输入**：将需要进行运算的定点数从外部输入到定点运算器的寄存器中[^1^]。\n   - **运算操作**：根据指定的运算类型，通过运算单元计算出结果[^1^]。\n   - **结果输出**：将运算得到的结果输出到指定的寄存器中，供后续的运算或输出到外部使用[^1^]。\n4. **关键技术**\n   - **乘法运算**：定点运算器中的乘法运算需要考虑定点数的小数位取舍、溢出判断和乘法结果的精度保持等问题[^1^]。\n   - **加减运算**：定点数的加减运算需要考虑进位和溢出的处理，以及结果的精度保持[^1^]。\n5. **总线结构**\n   - **单总线结构**：所有部件都接到同一总线上，同一时间内只能有一个操作数放在单总线上[^3^][^5^]。\n   - **双总线结构**：两条总线各自把数据送至ALU的输入端，两个操作数同时加到ALU进行计算[^3^][^5^]。\n   - **三总线结构**：旁路器的作用是不通过ALU实现通用寄存器内的数据传输，速度最快[^3^][^5^]。\n6. **性能优化**\n   - **流水线技术**：采用流水线技术可以提高定点运算器的处理速度和效率[^4^]。\n   - **位移技术**：利用位移操作可以简化乘除法运算，提高运算速度[^4^]。\n   - **预测技术**：通过预测技术可以减少运算延迟，提高定点运算器的性能[^4^]。\n7. **设计原则**\n   - **指令系统兼容性**：定点运算器的设计需要与指令系统兼容，确保能够正确执行各种指令[^5^]。\n   - **机器字长考虑**：机器字长决定了一次运算的位数和存储器的位数，影响定点运算器的设计[^5^]。\n   - **体系结构适应性**：定点运算器的设计需要考虑整个计算机系统的体系结构，确保其与其他部件的协同工作[^5^]。\n\n综上所述，定点运算器是计算机中不可或缺的组成部分，它在数值计算和数据处理方面发挥着重要作用。了解定点运算器的基本概念、组成、工作原理和技术特点，有助于更好地理解和应用这一重要的计算机组件。\n\n---\n# CPU内部的时钟频率\n在计算机领域，CPU的时钟频率是衡量其处理速度的一个重要指标。它代表了CPU每秒钟能够执行的周期数，这个数字越高，通常意味着CPU的运算能力越强。\n\n### 一、定义\n\n- **基本概念**：时钟频率是指振荡器产生的输入脉冲信号的频率，这个频率是同步电路工作的基准[^1^]。\n\n- **单位**：时钟频率的单位是赫兹（Hz），表示每秒周期性变化的次数[^2^]。\n\n- **重要性**：它是评定CPU性能的重要指标之一，因为时钟频率直接影响着CPU每秒可以执行的指令数[^3^]。\n\n### 二、原因\n\n- **命名由来**：时钟频率之所以被称为“时钟”，是因为它就像时钟一样规律地摆动，为CPU提供稳定的工作节奏。CPU的所有操作都按照这个节奏进行，确保了指令的有序执行[^6^]。\n\n- **与时间的关系**：时钟频率与时间紧密相关，它决定了CPU完成任务的速度。高频率意味着CPU可以在更短的时间内完成更多的工作[^7^]。\n\n- **技术实现**：在技术上，CPU通过内部的时钟电路来产生和控制时钟频率。这个频率是通过晶体振荡器产生的，晶体振荡器根据其物理特性在特定条件下以固定频率振动，从而提供稳定的时钟信号[^9^]。\n\n- **发展历史**：从早期的机械齿轮时钟到现代的电子振荡器，时钟技术的发展促进了现代计算机中时钟频率的应用。随着技术的进步，CPU的时钟频率也在不断提高，推动了计算机性能的提升[^10^]。\n\n- **与其他组件的关系**：CPU的时钟频率不仅影响自身的运行速度，还影响与其他硬件组件的数据交换速率。例如，内存和外设也需要与CPU的时钟频率同步，以确保数据的正确传输[^11^]。\n\n- **性能限制因素**：尽管时钟频率对CPU性能至关重要，但它并不是唯一的决定因素。CPU的架构、缓存大小、指令集等也会影响其最终性能[^3^]。\n\n- **能效考量**：随着能源成本的上升和环境保护意识的增强，高时钟频率带来的高能耗问题不容忽视。因此，现代CPU设计中越来越注重能效比，即在提供高性能的同时降低能耗[^7^]。\n\n综上所述，CPU的时钟频率不仅是衡量其性能的关键指标，也是整个计算机系统设计和优化的核心要素。了解时钟频率的定义和它为何被称为“时钟”，有助于深入理解现代计算机的工作原理和性能提升的途径。\n\n---\n# 为什么Cache 不能由程序或者程序员访问是高速缓存的透明性\n好的，关于Cache（高速缓存）的透明性，以下是一些解释：\n1. **定义与概念**：Cache的透明性指的是在计算机系统中，Cache的存在和操作对程序员来说是不可见的。这意味着程序员不需要直接管理或控制Cache，也不需要为了适应Cache的特性而修改程序代码。\n\n2. **透明性的体现**：Cache的管理完全由硬件自动完成，包括数据的读取、写入、替换等操作。这些操作对程序员是透明的，即程序员无法直接感知到这些操作的发生。由于Cache的存在，程序的执行速度得到了提升，但这种提升对程序员来说是“透明”的，即他们不需要为此付出额外的努力或编写额外的代码。\n\n3. **透明性的意义**：Cache的透明性简化了程序员的工作，使他们可以专注于编写程序逻辑，而无需关注底层的存储细节。同时，它也使得计算机系统能够更高效地利用资源，提高整体性能。\n\n4. **与非透明Cache的区别**：非透明Cache需要程序员显式地控制和管理Cache，这增加了编程的复杂性和难度。而透明Cache则通过硬件自动管理，减轻了程序员的负担。\n\n5. **实现方式**：Cache的透明性是通过硬件和操作系统的设计和优化来实现的。例如，现代CPU通常采用多级Cache结构，并通过复杂的替换策略和写回策略来优化Cache的性能。同时，操作系统也会提供相应的支持，以确保Cache的正确性和一致性。\n\n6. **对程序员的影响**：虽然Cache对程序员来说是透明的，但这并不意味着程序员可以完全忽略Cache的存在。了解Cache的工作原理和特性对于优化程序性能仍然是非常重要的。然而，在实际编程中，程序员通常不需要直接操作Cache，而是通过编写高效的代码来充分利用Cache的优势。\n\n7. **发展趋势**：随着计算机技术的不断发展，Cache的容量和速度都在不断提升，其透明性也在进一步增强。未来的计算机系统可能会采用更先进的Cache技术和算法，以进一步简化程序员的工作并提高系统性能。\n\n综上所述，Cache的透明性是指其在计算机系统中的存在和操作对程序员来说是不可见的。这种透明性简化了程序员的工作，提高了系统性能，并推动了计算机技术的进步和发展。\n\n---\n# 集成电路\n**集成电路的全称是Integrated Circuit，简称IC**。\n\n## 电源管理、时钟生成\n**电源管理（Power Management）是指系统在运行过程中对电源的有效控制，以优化功耗和性能；时钟生成（Clock Generation）则涉及为系统各部分提供同步信号，确保它们按照正确的时序工作**。以下是这两个概念的具体介绍：\n\n1. **电源管理**\n   - **定义与目的**：电源管理是指通过一系列技术和策略，有效控制和管理设备的电源消耗，以延长电池寿命、提高能效并降低运营成本。它涵盖了从硬件设计到软件实现的各个方面[^1^]。\n   - **主要技术**：动态电压频率调节（DVFS）、自适应电压调整（AVS）、电源模式转换（如休眠模式、待机模式）等是现代电源管理中的常用技术。这些技术可以根据系统负载动态调整电源供应，减少不必要的能源浪费[^1^]。\n   - **应用场景**：从个人电子设备（如智能手机、笔记本电脑）到数据中心的大型服务器系统，再到工业自动化和物联网设备，电源管理无处不在，对于提升设备续航能力、降低能耗具有重要意义[^1^]。\n2. **时钟生成**\n   - **定义与作用**：时钟生成是指在数字系统中产生稳定、准确的时钟信号的过程。这些信号用于同步系统内各个组件的操作，确保数据处理和传输的准确性和一致性[^2^]。\n   - **关键技术**：锁相环（PLL）、晶体振荡器（Crystal Oscillators）和时钟分配网络（Clock Distribution Networks, CDN）是实现高质量时钟信号的关键组件。PLL可以增加时钟频率的稳定性，而CDN负责将时钟信号分配给系统的各个部分[^2^]。\n   - **应用领域**：从微处理器到FPGA，再到通信设备，时钟生成对于任何需要精确时间控制的数字系统都是必不可少的。特别是在高速数据传输和处理领域，高质量的时钟信号对于保证系统性能至关重要[^2^]。\n\n综上所述，电源管理和时钟生成是现代电子系统中不可或缺的两大核心技术。它们分别从能源效率和时间准确性两个方面，共同支撑着系统的高效、稳定运行。\n","tags":["计算机基础","理论知识"],"categories":["专业课"]},{"title":"高等学习笔记","url":"/posts/2782156371.html","content":"![](file-20241023100726806.png)\n\n**记录高等数学学习过程中的疑惑点**\n\n<!-- more -->\n# 二阶线性微分方程\n二阶线性微分方程是**一类特殊的微分方程，其未知函数及其一阶、二阶导数都是一次方的**。这类方程在数学和物理学中有广泛的应用。以下是对二阶线性微分方程的详细解析：\n\n1. **基本形式**：二阶线性微分方程的标准形式为y''+p(x)y'+q(x)y=f(x)，其中p(x), q(x), f(x)在某区间上连续[^1^]。当f(x)=0时，该方程称为齐次方程；当f(x)≠0时，称为非齐次方程[^2^]。\n\n2. **解的结构**：对于二阶线性微分方程，其解通常包含两个独立的任意常数，这意味着解不是唯一的[^1^]。对于初值问题，如给定初始条件y(x_0)=y_0, y'(x_0)=y_1，则在x_0的邻域内存在唯一的解[^1^]。\n\n3. **求解方法**：二阶线性微分方程的求解方式分为两类：一是二阶线性齐次微分方程，二是线性非齐次微分方程。齐次方程主要采用特征方程求解，而非齐次方程则在对应的齐次方程的通解上加上特解即为非齐次方程的通解[^2^]。\n\n4. **特殊类型**：二阶常系数线性微分方程是二阶线性微分方程的一种特殊形式，其中p和q为常数。这种类型的方程在工程技术及力学和物理学中有广泛的应用[^3^]。其求解方法包括待定系数法、多项式法、常数变易法和微分算子法等[^3^]。\n\n5. **应用实例**：二阶线性微分方程在许多实际问题中都有应用，如振动问题、热传导问题等。例如，简谐振子的位移随时间的变化可以用二阶线性微分方程来描述[^3^]。\n\n综上所述，二阶线性微分方程不仅是数学理论的重要组成部分，也是解决实际问题的强大工具。通过掌握其基本形式、解的结构、求解方法以及特殊类型，可以更好地理解和应用这一重要的数学概念。\n\n---\n\n**二阶线性微分方程中的“二阶”指的是微分方程中未知函数的最高导数是二阶导数**。\n\n二阶导数在数学分析中表示函数变化的加速度，即速度的变化率。在物理问题中，这通常与物体的加速度相关联。例如，在简谐振子模型中，位移随时间的变化可以通过二阶导数来描述，反映了物体受力与其加速度之间的关系[^3^]。\n\n二阶线性微分方程的标准形式为y''+p(x)y'+q(x)y=f(x)，其中y''代表未知函数y关于变量x的二阶导数。这种形式的方程在物理学和工程学中有广泛的应用，如在振动分析、电路理论等领域[^1^][^2^]。\n\n---\n\n**二阶线性微分方程中的“线性”意味着微分方程中未知函数及其导数都是一次方的**。\n\n具体来说，这意味着在方程中，未知函数（通常表示为y）和其一阶导数（y'）、二阶导数（y''）都以一次幂的形式出现。这种形式的方程称为线性微分方程[^1^][^2^]。\n\n在线性微分方程中，未知函数及其各阶导数作为整体的一次幂，不包含这些变量的高次幂或它们之间的乘积[^2^]。例如，方程y''+p(x)y'+q(x)y=f(x)中，y、y'和y''都是一次方的，符合线性的定义[^1^]。\n\n总的来说，线性特性使得这类微分方程的求解过程具有特定的规律性和简便性，是数学和物理问题中常见的一种形式。\n\n\n# 虚数单位 i 的运算公式\n\n---\n在数学中，关于虚数单位 \\( i \\) 的运算公式主要涉及四则运算、幂运算和三角函数等。以下是一些常见的公式：\n\n1. **加法**\n   - **公式**：\\((a + bi) + (c + di) = (a + c) + (b + d)i\\)\n   - **解释**：虚数相加时，分别将它们的实部和虚部相加[^1^][^2^]。\n\n2. **减法**\n   - **公式**：\\((a + bi) - (c + di) = (a - c) + (b - d)i\\)\n   - **解释**：虚数相减时，分别将它们的实部和虚部相减[^1^][^2^]。\n\n3. **乘法**\n   - **公式**：\\((a + bi)(c + di) = ac + (ad + bc)i - bd\\)\n   - **解释**：利用分配律展开后，再结合 \\(i^2 = -1\\) 进行化简[^1^][^2^][^3^]。\n\n4. **除法**\n   - **公式**：\\(\\frac{a + bi}{c + di} = \\frac{ac + bd}{c^2 + d^2} + \\frac{bc - ad}{c^2 + d^2}i\\)\n   - **解释**：首先将分子分母同时乘以分母的共轭复数，使分母变为实数，然后进行除法运算并化简[^1^][^2^][^3^]。\n\n5. **幂运算**\n   - **公式**：\\(i^2 = -1\\)，\\(i^3 = -i\\)，\\(i^4 = 1\\)，以此类推，形成一个周期为4的循环[^3^][^4^]。\n   - **解释**：虚数单位 \\(i\\) 的幂运算具有周期性，每4次幂运算后回到原点。\n\n6. **三角函数**\n   - **正弦函数**：\\(\\sin(a + bi) = \\sin(a)\\cos(bi) + \\cos(a)\\sin(bi) = \\sin(a)\\cosh(b) + i\\sinh(b)\\cos(a)\\)\n   - **余弦函数**：\\(\\cos(a - bi) = \\cos(a)\\cos(bi) + \\sin(a)\\sin(bi) = \\cos(a)\\cosh(b) + i\\sinh(b)\\sin(a)\\)\n   - **正切函数**：\\(\\tan(a + bi) = \\frac{\\sin(a + bi)}{\\cos(a + bi)}\\)\n   - **余切函数**：\\(\\cot(a + bi) = \\frac{\\cos(a + bi)}{\\sin(a + bi)}\\)\n   - **正割函数**：\\(\\sec(a + bi) = \\frac{1}{\\cos(a + bi)}\\)\n   - **余割函数**：\\(\\csc(a + bi) = \\frac{1}{\\sin(a + bi)}\\)\n   - **解释**：这些三角函数公式将实数域的三角函数扩展到复数域，通过引入双曲函数来处理虚部[^2^][^4^]。\n\n7. **复数模和共轭**\n   - **模**：对于复数 \\(a + bi\\)，其模为 \\(\\sqrt{a^2 + b^2}\\)。\n   - **共轭**：复数 \\(a + bi\\) 的共轭复数为 \\(a - bi\\)。\n   - **解释**：模用于表示复数的大小，共轭复数在复数的除法运算中有重要作用。\n\n总的来说，这些公式构成了虚数单位 \\(i\\) 的基本运算框架，是理解和解决复数问题的基础。\n\n\n# 虚数和复数的区别\n---\n虚数和复数是数学中两个重要的概念，它们在数系中具有不同的地位和作用。下面将详细分析虚数和复数的区别：\n\n1. **定义与表示**\n   - **虚数**：虚数定义为形如a+bi的数，其中a和b是实数，且b≠0，i² = -1[^3^]。虚数的实部a对应平面上的横轴，虚部b对应纵轴[^5^]。\n   - **复数**：复数通常表示为a+bi的形式，其中a和b都是实数，i为虚数单位[^4^]。复数包括实数和虚数，当b=0时，复数即为实数；当a=0且b≠0时，复数称为纯虚数[^2^]。\n2. **历史背景**\n   - **虚数**：虚数的概念由17世纪著名数学家笛卡尔创立，最初被认为是“虚构”的数字，后来发现虚数在解决代数方程中有重要作用[^3^]。\n   - **复数**：复数的历史可以追溯到公元1世纪，希腊数学家海伦首次考虑了复数方根的问题。经过多个世纪的发展，复数逐渐被接受并广泛应用于数学、物理等领域[^4^]。\n3. **运算规则**\n   - **虚数**：虚数的加法、乘法等运算遵循特定的规则，例如(a+bi)±(c+di)=(a±c)+(b±d)i，(a+bi)(c+di)=(ac-bd)+(ad+bc)i[^3^]。\n   - **复数**：复数同样有加法、乘法等运算规则，但更为广泛。例如，复数的共轭、模等概念在虚数中并不适用[^4^]。\n4. **几何意义**\n   - **虚数**：虚数可以在复平面上表示为点或向量，其实部和虚部分别对应横轴和纵轴[^5^]。\n   - **复数**：复数不仅可以在复平面上表示为点，还可以通过极坐标形式表示，其实部和虚部构成复数的模和幅角[^4^]。\n5. **应用领域**\n   - **虚数**：虚数在数学分析、物理学中有广泛应用，特别是在解决某些类型的方程和函数问题时[^1^]。\n   - **复数**：复数的应用更加广泛，涵盖了工程学、信号处理、量子力学等多个领域。复数的理论为许多科学问题的解决提供了基础[^2^]。\n6. **哲学意义**\n   - **虚数**：虚数的存在挑战了人们对数字的传统认知，它的引入拓宽了数学的边界[^3^]。\n   - **复数**：复数不仅在数学上有重要地位，还在哲学上引发了对现实世界本质的思考。复数理论的发展促进了对数学抽象思维的理解[^4^]。\n\n综上所述，虚数和复数在数学中各自扮演着不可或缺的角色。虚数作为复数的一部分，其独特的性质和应用在数学史上具有重要意义。复数则因其广泛的应用和深刻的理论价值，成为现代数学不可或缺的一部分。\n\n**[虚数与复数与欧拉公式](https://zhuanlan.zhihu.com/p/347136244)**\n\n\n\n# 幂指函数求导\n---\n\n![](img-20241027183039392.png)\n![](img-20241027183044860.png)\n\n---\n\n# 余子式与代数余子式\n\n余子式和代数余子式在**定义、计算方法以及符号规则**等方面存在区别，下面是详细的对比分析：\n\n1. **定义**\n   - **余子式**：余子式是指在n阶行列式中划去元素aij所在的第i行与第j列后，剩下的n-1阶行列式[^1^][^2^]。\n   - **代数余子式**：代数余子式是在余子式的基础上乘以一个特定的符号因子(-1)^(i+j)，即Aij = (-1)^(i+j) * Mij[^3^][^4^]。\n\n2. **计算方法**\n   - **余子式**：直接计算去掉特定行和列后的行列式。例如，对于5阶行列式，去掉第2行和第4列后得到的3阶行列式即为相应的余子式[^7^]。\n   - **代数余子式**：先计算余子式，然后根据位置添加符号。例如，若某元素的代数余子式为Mi j，则其代数余子式为Aij = (-1)^(i+j) * Mij[^3^]。\n\n3. **符号规则**\n   - **余子式**：没有特定的符号规则，仅是去掉特定行和列后的行列式。\n   - **代数余子式**：符号由位置决定，(-1)^(i+j)，其中i和j分别是被去掉的行和列的索引[^3^][^4^]。\n\n4. **应用**\n   - **余子式**：用于简化高阶行列式的计算。通过将高阶行列式转换为低阶行列式，可以更容易地进行数值计算[^5^][^6^]。\n   - **代数余子式**：用于行列式的展开定理，即拉普拉斯展开。行列式等于它的任意一行（或列）的元素与其对应的代数余子式的乘积之和[^8^][^9^]。\n\n\n\n\n","tags":["高数","数学"],"categories":["数学","高数"]},{"title":"Java知识手册","url":"/posts/1289796624.html","content":"此处放一些个人收藏的技术网站，等待以后有时间自己沉淀技术博客文章\n\n<!-- more -->\n**[未读代码](https://www.wdbyte.com/)**\n\n**[Java八股文](https://www.yuque.com/vip6688/neho4x)**\n\n**[廖雪峰官方网站](https://liaoxuefeng.com/books/java/introduction/index.html)**\n\n**[精通JVM系列](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg4MjU0OTM1OA==&action=getalbum&album_id=1664731708878848004&scene=21#wechat_redirect)**\n\n**[徐靖峰|个人博客](https://www.cnkirito.moe/categories/)**\n","tags":["Java","面试","八股文"],"categories":["Java"]},{"title":"Hexo使用手册","url":"/posts/1899991772.html","content":"![](file-20241023124012083.png)\n\n<!-- more -->\n\n# Hexo搭建教程\n\n##### [知乎教程](https://zhuanlan.zhihu.com/p/60578464)\n\n##### [夜星梦尘](https://tech.yemengstar.com/hexo-tutorial-deploy-githubpages-beginner/)\n\n##### [CSDN个性化搭建](https://blog.csdn.net/as480133937/article/details/100138838)\n\n---\n\n# Hexo文档\n\n### **[Hexo中文文档](https://hexo.io/zh-cn/docs/)**\n\n### [STUM文档](https://theme-stun.github.io/docs/zh-CN/guide/primary.html#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95)\n---\n# Formatter介绍\n\n| 属性名              | 描述                                               | 是否必需 | 默认值   |\n| ---------------- | ------------------------------------------------ | ---- | ----- |\n| title            | 页面标题                                             | 是    | -     |\n| date             | 页面创建日期                                           | 是    | -     |\n| type             | 标签、分类和友情链接三个页面需要配置                               | 是    | -     |\n| updated          | 页面更新日期                                           | 否    | -     |\n| description      | 页面描述                                             | 否    | -     |\n| keywords         | 页面关键字                                            | 否    | -     |\n| comments         | 显示页面评论模块（默认为true）                                | 否    | true  |\n| top_img          | 页面顶部图片                                           | 否    | -     |\n| mathjax          | 显示mathjax（当设置mathjax的per_page: false时，才需要配置）     | 否    | false |\n| katex            | 显示katex（当设置katex的per_page: false时，才需要配置）         | 否    | false |\n| aside            | 显示侧边栏（默认为true）                                   | 否    | true  |\n| highlight_shrink | 配置代码框是否展开（true/false）（默认为设置中highlight_shrink的配置） | 否    | -     |\n\n> tips:以上这个表格的md是这样写的\n\n```js\n| 属性名       | 描述                                                         | 是否必需 | 默认值        |\n|------------|------------------------------------------------------------|--------|-------------|\n| title      | 页面标题                                                    | 是     | -           |\n| date       | 页面创建日期                                                | 是     | -           |\n| type       | 标签、分类和友情链接三个页面需要配置                          | 是     | -           |\n| updated    | 页面更新日期                                                | 否     | -           |\n| description| 页面描述                                                    | 否     | -           |\n| keywords   | 页面关键字                                                  | 否     | -           |\n| comments   | 显示页面评论模块（默认为true）                               | 否     | true        |\n| top_img    | 页面顶部图片                                                | 否     | -           |\n| mathjax    | 显示mathjax（当设置mathjax的per_page: false时，才需要配置）  | 否     | false       |\n| katex      | 显示katex（当设置katex的per_page: false时，才需要配置）      | 否     | false       |\n| aside      | 显示侧边栏（默认为true）                                     | 否     | true        |\n| highlight_shrink | 配置代码框是否展开（true/false）（默认为设置中highlight_shrink的配置） | 否     | -           |\n```\n\n---\n# Hexo分类多层级\n\n1. **父子分类**\n```\ncategories:\n- Diary\n- Life\n```\n会使分类Life成为Diary的子分类，而不是并列分类\n\n2. **并列+子分类**\n为文章添加多个分类，尝试一下list的方法\n```\ncategories:\n- [Diary, PlayStation]\n- [Diary, Games]\n- [Life]\n```\n此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类\n\n---\n\n# Hexo常用操作命令\n\n![](Hexo使用手册/hexo.png)\n\n---\n\n# Hexo+Obsidian高可用搭建说明\n\n#### 图片保存\n\n图片保存在Obsidian有自己的语法，要实现既可以在Ob上预览又可以在博客上显示出来需要一系列的设置\n\n1. **Ob上安装插件**\n   ![](Hexo使用手册/file-20241021180920049.png)\n2. **配置Ob相关设置**\n   ![](Hexo使用手册/file-20241021181007212.png)\n   ![](Hexo使用手册/file-20241021181012702.png)\n3. **安装插件hexo-asset--image**\n\n```\nnpm install hexo-asset-image --save\n```\n\n4. **修改_config.yml**\n   修改下列属性为true\n\n```\npost_asset_folder: true\n```\n\n以上步骤完成之后便可以正常使用\n每次在Ob中保存图片便会生成如下格式路径\n![](Hexo使用手册/file-20241021181834513.png)\n\n---\n\n# 编辑器使用转型经验\n\n- Obsidian\n\n> 适合编辑文本，编辑体验比vscode好\n> 缺点是不适合插入图片，无法设置子分类，无法自动生成时间\n> 使用简介，各种键入反应快捷\n\n- Vscode，\n\n> 可以插入图片，可以设置子分类\n> 缺点是编辑体验不如Obsidian好，预览显示有卡顿\n\n# 压缩插件\n\n**①Hexo-all-minifier**\n\n[MD地址](https://github.com/chenzhutian/hexo-all-minifier/blob/master/README.md)\n\n\n# Fluid主题\n## Tag插件\n\n```\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n## 可选标签：\n{% note primary %}\nprimary\n{% endnote %}\n{% note secondary %}\nsecondary\n{% endnote %}\n{% note success %}\nsuccess\n{% endnote %}\n{% note danger %}\ndanger\n{% endnote %}\n{% note warning %}\nwarning\n{% endnote %}\n{% note info %}\ninfo\n{% endnote %}\n{% note light %}\nlight\n{% endnote %}\n\n## 行内标签\n\n```\n{% label primary @text %}\n```\n可选标签：\n{% label primary @text %}\n{% label default @text %}\n{% label info @text %}\n{% label success @text %}\n{% label warning @text %}\n{% label danger @text %}\n\n## 折叠块\n\n使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：\n```\n{% fold info @title %}\n需要折叠的一段内容，支持 markdown\n{% endfold %}\n```\ninfo: 和行内标签类似的可选参数 title: 折叠块上的标题\n\n## 按钮\n```\n{% btn url, text, title %}\n```\nurl：跳转链接  \ntext：显示的文字  \ntitle：鼠标悬停时显示的文字（可选）\n{% btn url, text, title %}\n\n## 组图\n\n```\n{% gi total n1-n2-... %}\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n  ![](url)\n{% endgi %}\n```\ntotal：图片总数量，对应中间包含的图片 url 数量  \nn1-n2-...：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式\n\n如`{% gi 5 3-2 %}` 示例，代表共 5 张图，第一行 3 张图，第二行 2 张图。\n\n---\n\n# 优秀Hexo示范（Stun）主题\n\n##### [Case 1](https://uuanqin.top/)   向往的博客\n\n##### [Case 2](https://liuyib.github.io/)  stum主题作者的\n\n##### [Case 3](https://zhangjichengcc.github.io/blog/)   路人\n\n##### [Case 4](https://longtong666.github.io/blog/)  路人\n\n##### [Case 5](https://lasonneil.github.io/)  清河的博客\n\n##### [Case6](https://literature.junkuang.fun/) 君匡文集\n\n\n# Hexo运行报错合集\n\n## AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n![](img-20241028124035029.png)\n- 原因：\n![](img-20241028124330560.png)\n- 一开始我在网上搜索解决方法看到这句话，只有一个相关答案，我就在想有没有可能是转义错误，然后我测试了多个环节发现：\n- ![](img-20241028124124310.png)\n- 如果我在最外层加这种反单引号会导致报`AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:`的错，我如果去掉单引号就变成了上面别人说的那种转义的错误，所以我就把这一整个删了发现正常了。\n- 后面我发现，好像是因为分割线紧贴了这句话导致这句话格式变了，不再是正文格式，中间多留一行就能解决![](img-20241028125238738.png)\n- 对于这种小错误我也是真无奈，还好从坑里爬出来了，下次注意！","tags":["Hexo","GithubPages","Obsidian"],"categories":["Hexo"]},{"title":"我的第一篇博客文章","url":"/posts/2991444807.html","content":"![](file-20241023082318762.png)\n\n第一次使用hexo搭建个人博客\n","categories":["随意"]}]